using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared._Orehum.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;


namespace Content.Client._Orehum.Administration.GamePresetsPool;

[GenerateTypedNameReferences]
public sealed partial class GamePresetsPoolPanel : FancyWindow
{
    public Action<string>? OnDisablePreset;
    public Action<string>? OnEnablePreset;
    public Action OnUpdateRequest = null!;

    private readonly Dictionary<Button, (string presetId, bool enabled)> _buttonToState = new(16);
    private readonly Dictionary<string, Button> _presetIdToButton = new(16);

    private bool _locked = true;
    private bool _syncRequested = false;

    public GamePresetsPoolPanel()
    {
        RobustXamlLoader.Load(this);
    }

    public void UpdateState(GamePresetsPoolSyncMessage state)
    {
        _locked = false;
        _syncRequested = false;
        if (_buttonToState.Count == 0) // забиваем данные
        {
            foreach (var (presetId, (presetName, enabled)) in state.Presets)
            {
                var butt = new Button()
                {
                    Text = Loc.GetString(presetName),
                    Modulate = enabled ? Color.DarkGreen : Color.DarkGray
                };
                butt.OnPressed += OnButtonPressed;
                _buttonToState.Add(butt, (presetId, enabled));
                _presetIdToButton.Add(presetId, butt);
                PresetsContainer.AddChild(butt);
            }
        }
        else // обновляем данные
        {
            foreach (var (presetId, (_, enabled)) in state.Presets)
            {
                var butt = _presetIdToButton[presetId];
                _buttonToState[butt] = (presetId, enabled);
                butt.Modulate = enabled ? Color.DarkGreen : Color.DarkGray;
            }
        }
    }

    private void OnButtonPressed(BaseButton.ButtonEventArgs args)
    {
        if (_locked)
            return;

        _locked = true;

        var (presetId, enabled) = _buttonToState[(Button)args.Button];
        var newState = !enabled;
        _buttonToState[(Button) args.Button] = (presetId, enabled);

        if (newState && OnEnablePreset != null)
        {
            OnEnablePreset(presetId);
            return;
        }

        if (!newState && OnDisablePreset != null)
        {
            OnDisablePreset(presetId);
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_locked && !_syncRequested)
        {
            OnUpdateRequest();
            _syncRequested = true;
        }
    }
}

